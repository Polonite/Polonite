# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//Stp/Build/Config/Clang/Clang.gni")
import("//Stp/Build/Config/Sanitizers/Sanitizers.gni")
import("//Stp/Build/Toolchain/Toolchain.gni")

# Contains the dependencies needed for sanitizers to link into executables and
# shared_libraries.
group("deps") {
  public_deps = []
  if (using_sanitizer) {
    public_configs = [
      ":sanitizer_options_link_helper",

      # Even when a target removes default_sanitizer_flags, it may be depending
      # on a library that did not remove default_sanitizer_flags. Thus, we need
      # to add the ldflags here as well as in default_sanitizer_flags.
      ":default_sanitizer_ldflags",
    ]
    deps = [
      ":options_sources",
    ]
    if (is_win) {
      exe = ".exe"
    } else {
      exe = ""
    }
    data = [ "$clang_base_path/bin/llvm-symbolizer${exe}" ]
    if (is_linux) {
      # llvm-symbolizer needs this.
      data += [ "$clang_base_path/lib/libstdc++.so.6" ]
    }

    if (use_custom_libcxx) {
      public_deps += [
        "//Stp/Build/Tools/libc++:libcxx_proxy",
      ]
      data += [ "$root_out_dir/libc++.so" ]
    }
    if (is_win || is_mac || (is_ios && !use_xcode_clang)) {
      data_deps = [
        ":copy_asan_runtime",
      ]
    }
    if (is_mac || (is_ios && !use_xcode_clang)) {
      public_deps += [ ":asan_runtime_bundle_data" ]
    }
  }
}

if (is_mac && using_sanitizer) {
  copy("copy_asan_runtime") {
    sources = [
      "$clang_base_path/lib/clang/$clang_version/lib/darwin/libclang_rt.asan_osx_dynamic.dylib",
    ]
    outputs = [
      "$root_out_dir/{{source_file_part}}",
    ]
  }
}

config("sanitizer_options_link_helper") {
  if (is_mac) {
    ldflags = [ "-Wl,-U,_sanitizer_options_link_helper" ]
  } else if (!is_win) {
    ldflags = [ "-Wl,-u_sanitizer_options_link_helper" ]
  }
}

static_library("options_sources") {
  # This is a static_library instead of a source_set, as it shouldn't be
  # unconditionally linked into targets.
  visibility = [
    ":deps",
    "//:gn_visibility",
  ]
  sources = [
    "//Stp/Base/Compiler/Os.h",
    "//Stp/Base/Compiler/Config.h",
    "//Stp/Base/Compiler/SanitizerOptions.cpp",
  ]

  # Don't compile this target with any sanitizer code. It can be called from
  # the sanitizer runtimes, so instrumenting these functions could cause
  # recursive calls into the runtime if there is an error.
  configs -= [ "//Stp/Build/Config/Sanitizers:default_sanitizer_flags" ]

  if (is_asan) {
    sources += [ "//Stp/Base/Compiler/AsanSuppressions.cpp" ]
  }

  if (is_lsan) {
    sources += [ "//Stp/Base/Compiler/LsanSuppressions.cpp" ]
  }

  if (is_tsan) {
    sources += [ "//Stp/Base/Compiler/TsanSuppressions.cpp" ]
  }
}

# Applies linker flags necessary when either :deps or :default_sanitizer_flags
# are used.
config("default_sanitizer_ldflags") {
  visibility = [
    ":default_sanitizer_flags",
    ":deps",
  ]

  if (is_posix) {
    ldflags = []
    if (is_asan) {
      ldflags += [ "-fsanitize=address" ]
    }
    if (is_lsan) {
      ldflags += [ "-fsanitize=leak" ]
    }
    if (is_tsan) {
      ldflags += [ "-fsanitize=thread" ]
    }
    if (is_msan) {
      ldflags += [ "-fsanitize=memory" ]
    }
    if (is_ubsan || is_ubsan_security) {
      ldflags += [ "-fsanitize=undefined" ]
    }
    if (is_ubsan_null) {
      ldflags += [ "-fsanitize=null" ]
    }
    if (is_ubsan_vptr) {
      ldflags += [ "-fsanitize=vptr" ]
    }
  }
}

config("common_sanitizer_flags") {
  cflags = []
  cflags_cc = []

  # Sanitizers need line table info for stack traces. They don't need type info
  # or variable info, so we can leave that out to speed up the build (unless
  # it's explicitly asked for by setting |sanitizer_keep_symbols| to true).
  if (using_sanitizer) {
    assert(is_clang, "sanitizers only supported with clang")
    assert(!is_official_build, "sanitizers not supported in official builds")

    cflags += [ "-gline-tables-only" ]

    if (is_posix) {
      cflags += [ "-fno-omit-frame-pointer" ]
    } else {
      cflags += [ "/Oy-" ]
    }
  }

  if (use_custom_libcxx) {
    prefix = "//Stp/Build/Tools"
    include = "trunk/include"
    cflags_cc += [
      "-nostdinc++",
      "-isystem" + rebase_path("$prefix/libc++/$include", root_build_dir),
      "-isystem" + rebase_path("$prefix/libc++abi/$include", root_build_dir),
    ]
  }
}

config("asan_flags") {
  cflags = []
  if (is_asan) {
    cflags += [ "-fsanitize=address" ]
    if (is_android) {
      # Android build relies on -Wl,--gc-sections removing unreachable code.
      # ASan instrumentation for globals inhibits this and results in a
      # library with unresolvable relocations.
      # TODO(eugenis): find a way to reenable this.
      cflags += [
        "-mllvm",
        "-asan-globals=0",
      ]
    } else if (is_mac) {
      # http://crbug.com/352073
      cflags += [
        "-mllvm",
        "-asan-globals=0",
      ]
      # TODO(GYP): deal with mac_bundles.
    } else if (is_win) {
      assert(current_cpu == "x86", "WinASan is 32-bit only currently")
      if (is_component_build) {
        libs = [
          "clang_rt.asan_dynamic-i386.lib",
          "clang_rt.asan_dynamic_runtime_thunk-i386.lib",
        ]
      } else {
        # TODO(rnk): DLLs in the non-component build should link against
        # clang_rt.asan_dll_thunk-i386.lib instead.
        libs = [ "clang_rt.asan-i386.lib" ]
      }
    }
  }
}

config("coverage_flags") {
  cflags = []

  if (use_sanitizer_coverage) {
    cflags += [
      "-fsanitize-coverage=$sanitizer_coverage_flags",
      "-mllvm",
      "-sanitizer-coverage-prune-blocks=1",
    ]
    if (current_cpu == "arm") {
      # http://crbug.com/517105
      cflags += [
        "-mllvm",
        "-sanitizer-coverage-block-threshold=0",
      ]
    }
    defines = [ "SANITIZER_COVERAGE" ]
  }
}

config("lsan_flags") {
  if (is_lsan) {
    cflags = [ "-fsanitize=leak" ]
  }
}

config("msan_flags") {
  if (is_msan) {
    assert(is_linux, "msan only supported on linux x86_64")
    msan_blacklist_path =
        rebase_path("//Stp/Build/Config/Sanitizers/MsanBlacklist.txt", root_build_dir)
    cflags = [
      "-fsanitize=memory",
      "-fsanitize-memory-track-origins=$msan_track_origins",
      "-fsanitize-blacklist=$msan_blacklist_path",
    ]
  }
}

config("tsan_flags") {
  if (is_tsan) {
    assert(is_linux, "tsan only supported on linux x86_64")
    tsan_blacklist_path =
        rebase_path("//Stp/Build/Config/Sanitizers/TsanBlacklist.txt", root_build_dir)
    cflags = [
      "-fsanitize=thread",
      "-fsanitize-blacklist=$tsan_blacklist_path",
    ]
  }
}

config("ubsan_flags") {
  cflags = []
  if (is_ubsan) {
    ubsan_blacklist_path =
        rebase_path("//Stp/Build/Config/Sanitizers/UbsanBlacklist.txt", root_build_dir)
    cflags += [
      "-fsanitize=bool",
      "-fsanitize=bounds",
      "-fsanitize=enum",
      "-fsanitize=integer-divide-by-zero",
      "-fsanitize=null",
      "-fsanitize=object-size",
      "-fsanitize=return",
      "-fsanitize=returns-nonnull-attribute",
      "-fsanitize=shift",
      "-fsanitize=signed-integer-overflow",
      "-fsanitize=unreachable",
      "-fsanitize=vla-bound",
      "-fsanitize-blacklist=$ubsan_blacklist_path",
    ]
  }
}

config("ubsan_no_recover") {
  if (is_ubsan_no_recover) {
    cflags = [ "-fno-sanitize-recover=undefined" ]
  }
}

config("ubsan_security_flags") {
  if (is_ubsan_security) {
    ubsan_security_blacklist_path =
        rebase_path("//Stp/Build/Config/Sanitizers/UbsanSecurityBlacklist.txt", root_build_dir)
    cflags = [
      "-fsanitize=signed-integer-overflow,shift,vptr",
      "-fsanitize-blacklist=$ubsan_security_blacklist_path",
    ]
  }
}

config("ubsan_null_flags") {
  if (is_ubsan_null) {
    cflags = [ "-fsanitize=null" ]
  }
}

config("ubsan_vptr_flags") {
  if (is_ubsan_vptr) {
    ubsan_vptr_blacklist_path =
        rebase_path("//Stp/Build/Config/Sanitizers/UbsanVptrBlacklist.txt", root_build_dir)
    cflags = [
      "-fsanitize=vptr",
      "-fsanitize-blacklist=$ubsan_vptr_blacklist_path",
    ]
  }
}

all_sanitizer_configs = [
  ":common_sanitizer_flags",
  ":coverage_flags",
  ":default_sanitizer_ldflags",
  ":asan_flags",
  ":lsan_flags",
  ":msan_flags",
  ":tsan_flags",
  ":ubsan_flags",
  ":ubsan_no_recover",
  ":ubsan_null_flags",
  ":ubsan_security_flags",
  ":ubsan_vptr_flags",
]

# This config is applied by default to all targets. It sets the compiler flags
# for sanitizer usage, or, if no sanitizer is set, does nothing.
#
# This needs to be in a separate config so that targets can opt out of
# sanitizers (by removing the config) if they desire. Even if a target
# removes this config, executables & shared libraries should still depend on
# :deps if any of their dependencies have not opted out of sanitizers.
# Keep this list in sync with default_sanitizer_flags_but_ubsan_vptr.
config("default_sanitizer_flags") {
  configs = all_sanitizer_configs
}

# This config is equivalent to default_sanitizer_flags, but excludes ubsan_vptr.
# This allows to selectively disable ubsan_vptr, when needed. In particular,
# if some third_party code is required to be compiled without rtti, which
# is a requirement for ubsan_vptr.
config("default_sanitizer_flags_but_ubsan_vptr") {
  configs = all_sanitizer_configs - [ ":ubsan_vptr_flags" ]
}

config("default_sanitizer_flags_but_coverage") {
  configs = all_sanitizer_configs - [ ":coverage_flags" ]
}
