# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("Test.gni")

config("gtest_config") {
  visibility = [ ":*" ]

  defines = [
    # In order to allow regex matches in gtest to be shared between Windows
    # and other systems, we tell gtest to always use it's internal engine.
    "GTEST_HAS_POSIX_RE=0",
  ]

  # Gtest headers need to be able to find themselves.
  include_dirs = [ "include" ]

  if (is_win) {
    cflags = [ "/wd4800" ]  # Unused variable warning.
  }
}

config("gtest_direct_config") {
  visibility = [ ":*" ]
  defines = [ "UNIT_TEST" ]
}

config("gtest_warnings") {
  if (is_win && is_clang) {
    # The Mutex constructor initializer list in gtest-port.cc is incorrectly
    # ordered. See
    # https://groups.google.com/d/msg/googletestframework/S5uSV8L2TX8/U1FaTDa6J6sJ.
    cflags = [ "-Wno-reorder" ]
  }
}

static_library("GTest") {
  testonly = true
  sources = [
    "GMock.cpp",
    "GMockCardinalities.cpp",
    "GMockMatchers.cpp",
    "GMockSpecBuilders.cpp",
    "GTest.cpp",
    "GTestDeath.cpp",
    "GTestFilePath.cpp",
    "GTestPart.cpp",
    "GTestPort.cpp",
    "GTestPrinters.cpp",
    "GTestTyped.cpp",
    "GTestUtil.h",
    "Internal/GMockInternalUtils.cpp",
    "PlatformTest.h",
    "ScopedLocale.cpp",
    "ScopedLocale.h",
    "TestSuite.cpp",
    "TestSuite.h",
  ]

  if (is_darwin) {
    sources += [
      "GTestDarwin.h",
      "GTestDarwin.mm",
      "PlatformTestDarwin.mm",
    ]
  }

  deps = [ "//Stp/Base" ]
  include_dirs = [ "." ]

  all_dependent_configs = [ ":gtest_config" ]
  public_configs = [ ":gtest_direct_config" ]

  configs -= [ "//Stp/Build/Config/Compiler:internal_code" ]
  # FIXME fix gtest ifdefs
  configs -= [ "//Stp/Build/Config/Compiler:wundef" ]
  configs += [
    "//Stp/Build/Config/Compiler:external_code",

    # Must be after external_code for warning flags to be ordered correctly.
    ":gtest_warnings",
  ]

  if (!is_posix) {
    sources -= [
      "ScopedLocale.cpp",
      "ScopedLocale.h",
    ]
  }

  if (is_mac) {
    libs = [ "AppKit.framework" ]
  }

  if (is_android) {
    deps += [ ":base_unittests_jni_headers" ]
  }
}

config("perf_test_config") {
  defines = [ "PERF_TEST" ]
}

source_set("PerfTest") {
  testonly = true
  sources = [
    "PerfLog.cpp",
    "PerfLog.h",
    "PerfTest.cpp",
    "PerfTest.h",
    "PerfTestSuite.cpp",
    "PerfTestSuite.h",
    "PerfTimeLogger.cpp",
    "PerfTimeLogger.h",
  ]

  configs -= [ "//Stp/Build/Config/Compiler:wundef" ]

  deps = [
    "//Stp/Base",
    ":GTest",
  ]
}

static_library("GTestMain") {
  testonly = true
  sources = [
    "GTestMain.cpp",
  ]
  public_deps = [
    "//Stp/Base",
    ":GTest",
  ]
}

# This is a source set instead of a static library because it seems like some
# linkers get confused when "main" is in a static library, and if you link to
# this, you always want the object file anyway.
source_set("PerfTestMain") {
  testonly = true
  sources = [
    "PerfTestMain.cpp",
  ]
  public_deps = [
    "//Stp/Base",
    ":PerfTest",
  ]

  public_configs = [ ":perf_test_config" ]
}

test("BasePerfTests") {
  sources = [
    "../Util/DelegatePerfTest.cpp",
    "../Math/CommonFactorPerfTest.cpp",
  ]
  deps = [
    "//Stp/Base/Test:PerfTestMain",
  ]

  if (is_android) {
    deps += [ "//testing/android/native_test:native_test_native_code" ]
  }
}

test("BaseUnitTests") {
  sources = [
    "../App/AtExitTest.cpp",
    "../Containers/ArrayTest.cpp",
    "../Containers/BinarySearchTest.cpp",
    "../Containers/BitArrayTest.cpp",
    "../Containers/FlatMapTest.cpp",
    "../Containers/FlatSetTest.cpp",
    "../Containers/HashMapTest.cpp",
    # TODO "Containers/LinkedListTest.cpp",
    "../Containers/ListTest.cpp",
    # TODO "Containers/LruCacheTest.cpp",
    # TODO "Containers/SinglyLinkedListTest.cpp",
    "../Containers/SortingTest.cpp",
    # FIXME "../Containers/SpanTest.cpp",
    # TODO "Containers/StackTest.cpp",
    "../Crypto/Crc32Test.cpp",
    "../Crypto/Md5Test.cpp",
    "../Crypto/CryptoRandomTest.cpp",
    "../Crypto/Sha1Test.cpp",
#    "../FileSystem/DirectoryTest.cpp",
#    "../FileSystem/FilePathTest.cpp",
    # FIXME "FileSystem/FileTest.cpp",
    # FIXME "FileSystem/MemoryMappedFileTest.cpp",
    # FIXME "FileSystem/TemporaryDirectoryTest.cpp",
    "../Io/Base64Test.cpp",
    "../Io/TextWriterTest.cpp",

    # FIXME "Linux/ProcMapsTest.cpp",

    "../Math/AlignmentTest.cpp",
    "../Math/BitsTest.cpp",
    "../Math/CommonFactorTest.cpp",
#    "../Math/FixedTest.cpp",
    "../Math/FloatToIntegerTest.cpp",
    "../Math/HalfTest.cpp",
    "../Math/NBitsTest.cpp",
    "../Math/PowerOfTwoTest.cpp",
    "../Math/RawFloatTest.cpp",
    "../Math/SafeConversionsTest.cpp",
#    "../Math/SafeTest.cpp",
    "../Math/SaturatedMathTest.cpp",
    "../Memory/AlignedMallocTest.cpp",
    "../Memory/LinearAllocatorTest.cpp",
    "../Memory/OwnPtrTest.cpp",
    "../Memory/RefCountedTest.cpp",
    # FIXME "Memory/WeakPtrTest.cpp",
    "../Simd/VnxTest.cpp",
    "../System/CpuInfoTest.cpp",
    "../System/EnvironmentTest.cpp",
    "../System/LibraryTest.cpp",
#    "../System/SysInfoTest.cpp",
    "../Text/AsciiCharTest.cpp",
    "../Text/FormatIntegerTest.cpp",
    "../Text/StringSpanTest.cpp",
#    "../Text/StringTest.cpp",
    # FIXME "Text/UtfStringConversionsTest.cpp",
    "../Thread/AtomicOpsTest.cpp",
    "../Thread/ConditionVariableTest.cpp",
    "../Thread/LockTest.cpp",
    "../Thread/OneWriterSeqLockTest.cpp",
    "../Thread/ReadWriteLockTest.cpp",
    "../Thread/WaitableEventTest.cpp",
    "../Time/PrTimeTest.cpp",
    "../Time/ThreadTicksTest.cpp",
    "../Time/TimeDeltaTest.cpp",
    "../Time/TimeTicksTest.cpp",
    "../Time/TimeTest.cpp",
    "../Type/BasicTest.cpp",
    "../Type/HashableTest.cpp",
    "../Type/NullableTest.cpp",
    "../Type/ObjectCastTest.cpp",
    "../Type/ParseFloatTest.cpp",
    "../Type/ParseIntegerTest.cpp",
    "../Type/SignTest.cpp",
    "../Type/VariableTest.cpp",

    "../Util/AutoResetTest.cpp",
    "../Util/DelegateTest.cpp",
    "../Util/FinallyTest.cpp",
    "../Util/FlagsTest.cpp",
    "../Util/FunctionTest.cpp",
    "../Util/LazyInstanceTest.cpp",
    "../Util/ObserverListTest.cpp",
    "../Util/RandomTest.cpp",
    "../Util/RandomUtilTest.cpp",
    "../Util/SwapBytesTest.cpp",
    "../Util/TupleTest.cpp",
    "../Util/VersionTest.cpp",
  ]

  defines = []

  deps = [
    "//Stp/Base/Test:GTestMain",
  ]

  if (is_android) {
    deps += [
      "//Stp/Base:base_java",
      "//Stp/Base:base_java_unittest_support",
      "//Stp/Base/android/jni_generator:jni_generator_tests",
    ]
  }

  if (is_mac) {
    libs = [
      "CoreFoundation.framework",
      "Foundation.framework",
    ]
  }

  if (is_android) {
    set_sources_assignment_filter([])
    sources += [
      "../Linux/ProcMapsTest.cpp",
    ]
    set_sources_assignment_filter(sources_assignment_filter)
  }
}
