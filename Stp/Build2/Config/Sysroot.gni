# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This header file defines the "sysroot" variable which is the absolute path
# of the sysroot. If no sysroot applies, the variable will be an empty string.

declare_args() {
  # The absolute path of the sysroot that is applied when compiling using
  # the target toolchain.
  target_sysroot = ""

  # The absolute path to directory containing sysroots for linux 32 and 64bit
  target_sysroot_dir = ""

  use_sysroot = false
}

if (is_linux && target_sysroot_dir != "") {
  if (current_cpu == "x64") {
    sysroot = target_sysroot_dir + "/wheezy-x64"
  } else if (current_cpu == "x86") {
    sysroot = target_sysroot_dir + "/wheezy-ia32"
  }
} else if (current_os == target_os && current_cpu == target_cpu &&
           target_sysroot != "") {
  sysroot = target_sysroot
} else if (is_android) {
  import("//Stp/Build/Config/Android/Config.gni")
  if (current_cpu == "x86") {
    sysroot = "$android_ndk_root/$x86_android_sysroot_subdir"
  } else if (current_cpu == "arm") {
    sysroot = "$android_ndk_root/$arm_android_sysroot_subdir"
  } else if (current_cpu == "x64") {
    sysroot = "$android_ndk_root/$x86_64_android_sysroot_subdir"
  } else if (current_cpu == "arm64") {
    sysroot = "$android_ndk_root/$arm64_android_sysroot_subdir"
  } else {
    sysroot = ""
  }
} else if (is_linux && use_sysroot) {
  # By default build against a sysroot image downloaded from Cloud Storage
  # during gclient runhooks.
  if (current_cpu == "x64") {
    sysroot = "//Stp/Build/linux/debian_wheezy_amd64-sysroot"
  } else if (current_cpu == "x86") {
    sysroot = "//Stp/Build/linux/debian_wheezy_i386-sysroot"
  } else if (current_cpu == "arm") {
    sysroot = "//Stp/Build/linux/debian_wheezy_arm-sysroot"
  } else if (current_cpu == "arm64") {
    sysroot = "//Stp/Build/linux/debian_jessie_arm64-sysroot"
  } else {
    # Any other builds don't use a sysroot.
    sysroot = ""
  }

  if (sysroot != "") {
    # Our sysroot images only contains gcc 4.6 headers, but chromium requires
    # gcc 4.9. Clang is able to detect and work with the 4.6 headers while
    # gcc is not. This check can be removed if we ever update to a more modern
    # sysroot.
    assert(is_clang, "sysroot images require clang (try use_sysroot=false)")

    _script_arch = current_cpu
    if (_script_arch == "x86") {
      _script_arch = "i386"
    } else if (_script_arch == "x64") {
      _script_arch = "amd64"
    }
    assert(
        exec_script("//Stp/Build/DirExists.py",
                    [ rebase_path(sysroot) ],
                    "string") == "True",
        "Missing sysroot ($sysroot). To fix, run: Build/linux/sysroot_scripts/install-sysroot.py --arch=$_script_arch")
  }
} else if (is_mac) {
  import("//Stp/Build/Config/mac/mac_sdk.gni")
  sysroot = mac_sdk_path
} else if (is_ios) {
  import("//Stp/Build/Config/ios/ios_sdk.gni")
  sysroot = ios_sdk_path
} else {
  sysroot = ""
}
