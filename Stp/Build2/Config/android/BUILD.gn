# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//Stp/Build/Config/android/config.gni")
import("//Stp/Build/Config/Sanitizers/Sanitizers.gni")

assert(is_android)

# This is included by reference in the //Stp/Build/Config/Compiler config that
# is applied to all targets. It is here to separate out the logic that is
# Android-only.
config("compiler") {
  cflags = [
    "-ffunction-sections",
    "-fno-short-enums",
  ]
  defines = [
    "ANDROID",

    # The NDK has these things, but doesn't define the constants to say that it
    # does. Define them here instead.
    "HAVE_SYS_UIO_H",

    # Forces full rebuilds on NDK rolls.
    "ANDROID_NDK_VERSION=${android_ndk_version}",
  ]

  if (!is_clang) {
    # Clang doesn't support these flags.
    cflags += [ "-finline-limit=64" ]
  }

  ldflags = [
    "-Wl,--no-undefined",

    # Don't allow visible symbols from libgcc or libc++ to be
    # re-exported.
    "-Wl,--exclude-libs=libgcc.a",
    "-Wl,--exclude-libs=libc++_static.a",
  ]

  if (is_clang) {
    if (current_cpu == "arm") {
      abi_target = "arm-linux-androideabi"
    } else if (current_cpu == "x86") {
      abi_target = "i686-linux-androideabi"
    } else if (current_cpu == "arm64") {
      abi_target = "aarch64-linux-android"
    } else if (current_cpu == "x64") {
      # Place holder for x64 support, not tested.
      # TODO: Enable clang support for Android x64. http://crbug.com/539781
      abi_target = "x86_64-linux-androideabi"
    } else {
      assert(false, "Architecture not supported")
    }
    cflags += [ "--target=$abi_target" ]
    ldflags += [ "--target=$abi_target" ]
  }

  # Assign any flags set for the C compiler to asmflags so that they are sent
  # to the assembler.
  asmflags = cflags
}

# This is included by reference in the //Stp/Build/Config/Compiler:runtime_library
# config that is applied to all targets. It is here to separate out the logic
# that is Android-only. Please see that target for advice on what should go in
# :runtime_library vs. :compiler.
config("runtime_library") {
  # NOTE: The libc++ header include paths below are specified in cflags_cc
  # rather than include_dirs because they need to come after include_dirs.
  # Think of them like system headers, but don't use '-isystem' because the
  # arm-linux-androideabi-4.4.3 toolchain (circa Gingerbread) will exhibit
  # strange errors. The include ordering here is important; change with
  # caution.
  cflags_cc = [
    "-isystem" +
        rebase_path("$android_libcpp_root/libcxx/include", root_build_dir),
    "-isystem" + rebase_path(
            "$android_ndk_root/sources/cxx-stl/llvm-libc++abi/libcxxabi/include",
            root_build_dir),
    "-isystem" +
        rebase_path("$android_ndk_root/sources/android/support/include",
                    root_build_dir),
  ]

  defines = [ "__GNU_SOURCE=1" ]  # Necessary for clone().
  ldflags = [ "-nostdlib" ]
  lib_dirs = [ android_libcpp_lib_dir ]

  # The libc++ runtime library (must come first).
  # ASan needs to dynamically link to libc++ even in static builds so
  # that it can interpose operator new.
  if (is_component_build || is_asan) {
    libs = [ "c++_shared" ]
  } else {
    libs = [ "c++_static" ]
  }

  # Manually link the libgcc.a that the cross compiler uses. This is
  # absolute because the linker will look inside the sysroot if it's not.
  libs += [
    rebase_path(android_libgcc_file),
    "c",
  ]

  # Clang with libc++ does not require an explicit atomic library reference.
  if (!is_clang) {
    libs += [ "atomic" ]
  }

  if (is_clang) {
    # Work around incompatibilities between bionic and clang headers.
    defines += [
      "__compiler_offsetof=__builtin_offsetof",
      "nan=__builtin_nan",
    ]
  }

  ldflags += [ "-Wl,--warn-shared-textrel" ]
}

config("executable_config") {
  cflags = [ "-fPIE" ]
  asmflags = [ "-fPIE" ]
  ldflags = [ "-pie" ]
}
